load("Tree.RData")
library(RColorBrewer)
palette <- brewer.pal(3,"set2")
palette <- brewer.pal(3,"Set2")
ui <- fluidPage(
titlePanel("Iris Species Predictor") ,
sidebarLayout(
sidebarPane(
sliderInput(
inputId = "petal.length",
label = "Petal Length (cm)",
min = 1,
max = 7,
value = 4
),
sliderInput(
inputId = "petal.width",
label = "Petal Width (cm)",
min = 0.0,
max = 2.5,
step= 0.5,
value = 1.5
)),
mainPanel(
textOutput(
outputId = "text"),
plotOutput(
outputId = "plot"))))
ui <- fluidPage(
titlePanel("Iris Species Predictor") ,
sidebarLayout(
sidebarPanel(
sliderInput(
inputId = "petal.length",
label = "Petal Length (cm)",
min = 1,
max = 7,
value = 4
),
sliderInput(
inputId = "petal.width",
label = "Petal Width (cm)",
min = 0.0,
max = 2.5,
step= 0.5,
value = 1.5
)),
mainPanel(
textOutput(
outputId = "text"),
plotOutput(
outputId = "plot"))))
install.packages('shiny', repos='https://cran.rstudio.com/')
# Load Shiny
library(shiny)
#Create a UI
ui <- fluidPage("Hello World!")
#create a server
server <- function(input, output){}
# Create a shiny app
shinyApp(
ui = ui,
server = server)
install.packages("shiny", repos = "https://cran.rstudio.com/")
install.packages("shiny", repos = "https://cran.rstudio.com/")
install.packages("shiny", repos = "https://cran.rstudio.com/")
install.packages("shiny", repos = "https://cran.rstudio.com/")
#install.packages('shiny', repos='https://cran.rstudio.com/')
# Load Shiny
library(shiny)
#Create a UI
ui <- fluidPage("Hello World!")
#create a server
server <- function(input, output){}
# Create a shiny app
shinyApp(
ui = ui,
server = server)
setwd("C:/JasmineAung/Projects/R")
#Load tree Model
load("Tree.RData")
#Load color brewer library
library(RColorBrewer)
#Create a color palette
palette <- brewer.pal(3,"Set2")
#Create user interface code
ui <- fluidPage(
titlePanel("Iris Species Predictor") ,
sidebarLayout(
sidebarPanel(
sliderInput(
inputId = "petal.length",
label = "Petal Length (cm)",
min = 1,
max = 7,
value = 4
),
sliderInput(
inputId = "petal.width",
label = "Petal Width (cm)",
min = 0.0,
max = 2.5,
step= 0.5,
value = 1.5
)),
mainPanel(
textOutput(
outputId = "text"),
plotOutput(
outputId = "plot"))))
#Create server code
server <- function(input, output){
output$text = renderText({
#Create predictors
predictors <- data.frame(
Petal.Length = input$petal.length,
Petal.Width = input$petal.width,
Sepal.Length = 0,
Sepal.Width = 0
)
#Make prediction
prediction = predict(
object = model,
newdata = predictors,
type= "class")
#Create prediction text
paste("The predicted species is",
as.character(prediction))
})
output$plot = renderPlot({
#Create a scatterplot by species
#Create a scatterplot colored by species
plot(
x = iris$Petal.Length,
y = iris$Petal.Width,
pch= 19,
col = palette[as.numeric(iris$Species)],
main = "Iris Petal Length vs. Width",
xlab = "Petal Length (cm)",
ylab = "Petal Width (cm)"
)
#Plot the decision boundaries
partition.tree(
model,
label = "Species",
add = TRUE)
#Draw predictor on plot
points(
x = input$petal.length,
y = input$petal.width,
col = "red",
pch = 4, #Plot Character
cex = 2, # Plot Sample Size
lwd = 2) # Line width
})
}
# Create a shiny app
shinyApp(
ui = ui,
server = server)
#set working directory
setwd("C:/JasmineAung/Projects/R")
#Load tree Model
load("Tree.RData")
#Load color brewer library
library(RColorBrewer)
#Create a color palette
palette <- brewer.pal(3,"Set2")
#Create user interface code
ui <- fluidPage(
titlePanel("Iris Species Predictor") ,
sidebarLayout(
sidebarPanel(
sliderInput(
inputId = "petal.length",
label = "Petal Length (cm)",
min = 1,
max = 7,
value = 4
),
sliderInput(
inputId = "petal.width",
label = "Petal Width (cm)",
min = 0.0,
max = 2.5,
step= 0.5,
value = 1.5
)),
mainPanel(
textOutput(
outputId = "text"),
plotOutput(
outputId = "plot"))))
#Create server code
server <- function(input, output){
output$text = renderText({
#Create predictors
predictors <- data.frame(
Petal.Length = input$petal.length,
Petal.Width = input$petal.width,
Sepal.Length = 0,
Sepal.Width = 0
)
#Make prediction
prediction = predict(
object = model,
newdata = predictors,
type= "class")
#Create prediction text
paste("The predicted species is",
as.character(prediction))
})
output$plot = renderPlot({
#Create a scatterplot by species
#Create a scatterplot colored by species
plot(
x = iris$Petal.Length,
y = iris$Petal.Width,
pch= 19,
col = palette[as.numeric(iris$Species)],
main = "Iris Petal Length vs. Width",
xlab = "Petal Length (cm)",
ylab = "Petal Width (cm)"
)
#Plot the decision boundaries
partition.tree(
model,
label = "Species",
add = TRUE)
#Draw predictor on plot
points(
x = input$petal.length,
y = input$petal.width,
col = "red",
pch = 4, #Plot Character
cex = 2, # Plot Sample Size
lwd = 2) # Line width
})
}
shinyApp(
ui = ui,
server = server)
shinyApp(
ui = ui,
server = server)
partition.tree(
tree = model,
label = "Species",
add = TRUE
)
library(RColorBrewer)
palette <- brewer.pal(3,"Set2")
#set working directory
setwd("C:/JasmineAung/Projects/R")
#Load tree Model
load("Tree.RData")
#Load color brewer library
library(RColorBrewer)
#Create a color palette
palette <- brewer.pal(3,"Set2")
#Create user interface code
ui <- fluidPage(
titlePanel("Iris Species Predictor") ,
sidebarLayout(
sidebarPanel(
sliderInput(
inputId = "petal.length",
label = "Petal Length (cm)",
min = 1,
max = 7,
value = 4
),
sliderInput(
inputId = "petal.width",
label = "Petal Width (cm)",
min = 0.0,
max = 2.5,
step= 0.5,
value = 1.5
)),
mainPanel(
textOutput(
outputId = "text"),
plotOutput(
outputId = "plot"))))
#Create server code
server <- function(input, output){
output$text = renderText({
#Create predictors
predictors <- data.frame(
Petal.Length = input$petal.length,
Petal.Width = input$petal.width,
Sepal.Length = 0,
Sepal.Width = 0
)
#Make prediction
prediction = predict(
object = model,
newdata = predictors,
type= "class")
#Create prediction text
paste("The predicted species is",
as.character(prediction))
})
output$plot = renderPlot({
#Create a scatterplot by species
#Create a scatterplot colored by species
plot(
x = iris$Petal.Length,
y = iris$Petal.Width,
pch= 19,
col = palette[as.numeric(iris$Species)],
main = "Iris Petal Length vs. Width",
xlab = "Petal Length (cm)",
ylab = "Petal Width (cm)"
)
#Plot the decison tree boundaries
partition.tree(
tree = model,
label = "Species",
add = TRUE
)
#Draw predictor on plot
points(
x = input$petal.length,
y = input$petal.width,
col = "red",
pch = 4, #Plot Character
cex = 2, # Plot Sample Size
lwd = 2) # Line width
})
}
# Create a shiny app
shinyApp(
ui = ui,
server = server)
#predicting with machine learning
#Load the data
data(iris)
#make a sequence of ramdomly generated values
#by setting randome number seed to an arbitrary number
#R will produce the same sequence of random numbers
set.seed(42)
#Randomly sample 100 to 150 row indexes
indexes <- sample(
x = 1:150, size = 100)
#Inspect the random indexes
print(indexes)
#Create a training set from indexes 100 rows
train <- iris[indexes,]
#Create a test set from remaining indexes 50 rows
test <- iris[-indexes,]
#install tree package
#install.packages('tree', dep = TRUE)
# Load the decision tree package
library(tree)
#Train a decision tree model
# Species (Outcome variable), rest of the columns as
# explanatory data set
model <- tree(
formula = Species ~ .,
data = train
)
#Inspect the model
summary(model)
#Vistualize the decision tree model
plot(model)
text(model)
#Visualize the decision tree boundaries with
#dimensional scatterplot
library(RColorBrewer)
#Create a color palette
palette <- brewer.pal(3, "Set2")
#Create a scatterplot colored by species
plot(
x = iris$Petal.Length,
y = iris$Petal.Width,
pch= 19,
col = palette[as.numeric(iris$Species)],
main = "Iris Petal Length vs. Width",
xlab = "Petal Length (cm)",
ylab = "Petal Width (cm)"
)
#Plot the decison tree boundaries
partition.tree(
tree = model,
label = "Species",
add = TRUE
)
####Compare Prediction Model with Actual Test Result###
predictions <- predict(
object = model, #set tree model
newdata = test,#set test data set
type = "class" #set classification
)
#Create a confusion matrix (Two Dimentional Matrix)
table(
x = predictions,
y= test$Species)
# ###caret package (Classification and Regression training)
#install tree package
install.packages('caret', dep = TRUE)
#Load the caret package
library(lattice)
library(ggplot2)
library(caret)
#Evaluate the prediction results
confusionMatrix(
data = predictions,
reference = test$Species
)
# Set working directory
setwd("C:/JasmineAung/Projects/R")
# Save the tree model
save(model, file = "Tree.RData")
# Save the training data
save(train, file = "Train.RData")
#install.packages('shiny', repos='https://cran.rstudio.com/')
# Load Shiny
library(shiny)
#Create a UI
ui <- fluidPage("Hello World!")
#create a server
server <- function(input, output){}
# Create a shiny app
shinyApp(
ui = ui,
server = server)
#set working directory
setwd("C:/JasmineAung/Projects/R")
#Load Train Model
load("Train.RData")
#Load color brewer library
library(RColorBrewer)
#Create a color palette
palette <- brewer.pal(3,"Set2")
#Create user interface code
ui <- fluidPage(
titlePanel("Iris Species Predictor") ,
sidebarLayout(
sidebarPanel(
sliderInput(
inputId = "petal.length",
label = "Petal Length (cm)",
min = 1,
max = 7,
value = 4
),
sliderInput(
inputId = "petal.width",
label = "Petal Width (cm)",
min = 0.0,
max = 2.5,
step= 0.5,
value = 1.5
)),
mainPanel(
textOutput(
outputId = "text"),
plotOutput(
outputId = "plot"))))
#Create server code
server <- function(input, output){
output$text = renderText({
#Create predictors
predictors <- data.frame(
Petal.Length = input$petal.length,
Petal.Width = input$petal.width,
Sepal.Length = 0,
Sepal.Width = 0
)
#Make prediction
prediction = predict(
object = model,
newdata = predictors,
type= "class")
#Create prediction text
paste("The predicted species is",
as.character(prediction))
})
output$plot = renderPlot({
#Create a scatterplot by species
#Create a scatterplot colored by species
plot(
x = iris$Petal.Length,
y = iris$Petal.Width,
pch= 19,
col = palette[as.numeric(iris$Species)],
main = "Iris Petal Length vs. Width",
xlab = "Petal Length (cm)",
ylab = "Petal Width (cm)"
)
#Plot the decison tree boundaries
partition.tree(
tree = model,
label = "Species",
add = TRUE
)
#Draw predictor on plot
points(
x = input$petal.length,
y = input$petal.width,
col = "red",
pch = 4, #Plot Character
cex = 2, # Plot Sample Size
lwd = 2) # Line width
})
}
# Create a shiny app
shinyApp(
ui = ui,
server = server)
