Why Angular? 
===========
- Speed up your web application 
- Avoid post-backs 
- Reduce total Byte transferred 
- Reduce Server-side code
- Less Client Side code than Jquery

Angular Syntax 
===============
module 
-------

- is like namespace to create scope that contain a set of related objects 
eg/
    angular.module('app', []);  //Create brand new module call app 
    angular.module('app'); //Get app module



ng-app 
-------
- to define namespace 
eg/ 
<div ng-app="app"/>

ng-controller
-------------
- pass controller

eg/
<div ng-app="app" ng-controller="ProductControler as vm"> </div>


$scope 
-------
 - is a glue between view and controller. Can use this instead of $scope 
 eg/ 

 <div ng-app="app" ng-controller="ProductControler as vm">
 </div>


 (function(){
   'use strict'; 
	
	angular.module('app')
	  .controller('ProductController', ProductController);

	function ProductController(){
	 var vm = this; 

	 vm.product = {
	   ProductId: 1, 
	   ProductName : 'Video Training'
	 };
	}
 })();


 data binding
 -------------
 binding data with {{}}

 eg/
  <div ng-app="app" ng-controller="ProductControler as vm">
	<span>{{vm.product.ProductName}}</span>
 </div>


 filter 
 ---------
 aLike search in all property
 -----------------------------
 eg/<tr ng-repeat="product in vm.products | filter:vm.searchInput.productName"></tr>

 Single property search 
 ----------------------
 eg/<tr ng-repeat="product in vm.products | filter: {ProdudctName: vm.searchInput.productName}"></tr>

 Specify function on scope to search
 -----------------------------------
 eg/<tr ng-repeat="product in vm.products | filter: vm.searchImmediate"></tr>
MVC vs MVVM 
=============
MVC - Model View Controller Framework for easier to test and maitain. 
1. View pass control to Controller
2. Controller manipulate-> Model
3. Model fire events View

MVVM - refinement of MVC and used to facliate pesentation separation by using seperate abstract view of User Interface. 
View and ViewModel communicate using methods, properties and events. Bi directional data binding.


Javascript 
===========
Modernizr
==========
- repond to your user's browser features. it defects what HTML, CSS and JavaScript Features the user's browers has to offer
- ensure user browser use latest features in broweser which support them
use strict 
===========
- is new in JS 1.8.5 
- is not a statement, but a literal expression 
- purpose to indicate the code should be executed in "strict mode"
- eg/ 
	x= 3.14; // This will cause an error because x is not declared. 


