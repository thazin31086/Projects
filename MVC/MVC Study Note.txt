Study Link
============
http://www.webdevelopmenthelp.net/2014/06/asp-net-mvc-pass-data-controller-view.html
http://www.webdevelopmenthelp.net/2013/09/top-asp-net-mvc-interview-questions.html#Q4
https://www.codeproject.com/Articles/426766/Custom-Filters-in-MVC-Authorization-Action-Result

MVC 3
 - Support HTML 2 and CSS 3
 - Model Validation 
 - Razor View Engine 
  - Controller Improvments Like ViewBag Dynamic Property

Controller --> View
           ---> Model ---> View

What is MVC ? 
-------------
 MVC is software architectural pattern that separates an application into three main logical components Model, View and Controller 
 Model - corresponds to all the data related logic that the user works. The data is being transferred between View, Controllers and components
 View - used of all the UI logic of the application 
 Contoller - controller act as interface between Model and View Components

Maintain State between a Controller
------------------------------------
 Below options can be used with MVC
  - ViewData 
  - ViewBag
  - TempData
  - Model


 ViewData and ViewBag are single server called (meaning value will be null if redirect occurs). To maintain state from once controller to another then tempData can be used

 ViewData and ViewBag serve the same purpose, View Data is dictionary object and require typecating and null checks. ViewBag is dynamic property that doesn't have typecasting and null check. ViewBag is dynamic time as it can introduce runtime error. 

 TempData is a dictionary object that stay for the time of an http request. It can be used to maintain data between redirect from one controller and another controller. 


What is ASP.NET MVC? 
--------------------

ASP.NET MVC is a web development framework that is based on MVC architectural design pattern. 

Difference ASP.NET MVC and ASP.NET Web Form 
--------------------------------------------
Web form uses page controller approach where every page has its wo page controller (eg, code behind file that process the request)

MVC use common controller for every page. 

Core Features of ASP.NET MVC?
-----------------------------
- Clear separation of application concerns (Presentation and Business Logice). Make it ideal for large scale application where multiple teams are working
- URL routing is more user-friendly

- Supporting existing ASP.NET features like membership, role, authentication and authorization, caching etc.

- Action Methods - In MVC, controllers have specific methods to perform user action. Request coming to controller search for specific action method. Action methods perform operation using model and return result back to view as viewresult.
By default, all public methods in controller are considerred as action method unless method is marked it with [NoAction] Attribute

eg/

[NoAction]
public void MyNonActionMethod()
{

}

- ActionResults 
  There are many built-in actionresults type can be applied in action methods
    - ViewResult
    - PartialViewResult
    - RedirectResult
    - RedirectToRouteResule
    - ContentResult
    - JsonResult
    - EmptyResult
 
ASP.NET MVC Framework
=====================
Firstly, client request hit controller and controller decides which model to serve the request. Then, pass the model to view and generate appropiate response that rendered to client. 


Role of Model in MVC
---------------------
- contains all application logic including validation, business and data logic. 
- it is responsible for acessing data from medium like data and manipulate it. 


ViewEngine in ASP.NET MVC
--------------------------
ViewEngine in MVC used to translate our views to HTML and then render to browser. 
Types:  Razor, Webform, Spark(Open Source), NHaml (Open Source)
eg/
public ActionResult Index()
{
   return View();
}

HtmlHelpers
-----------
Htmlhelpers serve the same purpose as ASP.NET Web form controls. From implementation point of view, it is a method that returns a string 
eg, @Html.ActionLink("Webdev Consulting Company", "CompanyInfo")
will render: 
<a href="/Site/CompanyInfo">Web Consulting Company</a>

Attribute Routing
-----------------
MVC use friendly URLs that are mapped to controller's action
In MVC, you can use attributes to define routes to better control over the URL. 

eg/ 
public class publicontroller : controller
{
   [Route("Product/{productId?}")]
   public ActionResult Product(string productId)
   {

   }
}

Scaffolding in MVC
------------------
Scaffolding is basically a Code Generation Framework. It generate basic controller as well as views for the models using T4 Templates. 
T4 - Text Template Transformation Toolkit. T4 is template based text generation framework included in Visual Studio. 
Data validation based on database schema. 


Action Filters
--------------
If you want to apply specific logic before and after action methods, you can apply action filters. There are four types of action filters can use in MVC 
eg. Authorization Filters to restrict access to a specific user 
    Action Filters (eg, outputcache) to cache the output of the controller
    Result Filter
    Exception Filter

ASP.NET Identity
----------------
ASP.NET Identity Framework is open source platform to manage access in ASP.NET application. It can be customized according to the requirement. It can be used in ASP.Net Web Forms, MVC, Web API and SignalR. It support multiple storeage system like Relational Database, SharePoint, Azure etc.

SignalR
------- 
can be used to add any sort-of "real-time" web functionality to your ASP.NET Application. eg, chatting application, Ajax long polling to retrieve new data.
http://www.webdevelopmenthelp.net/2015/07/customize-profile-info-in-asp-net-identity.html



